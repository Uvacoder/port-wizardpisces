const e={title:"virtual-machine 简介",description:null},t='<h3 id="Virtual machine"><a href="#Virtual machine"></a>Virtual machine</h3>\n<ul>\n<li><a href="#Bytecode">ByteCode</a></li>\n</ul>\n<h1 id="Bytecode"><a href="#Bytecode"></a>Bytecode</h1>\n<p>A tree-walk interpreter is simple, portable, and slow.\nOn the other, native code(machine code) is complex and platform-specific but fast.\nBytecode sits in the middle. which needs to be run on <a href="http://craftinginterpreters.com/image/chunks-of-bytecode/phases.png">virtual machine</a></p>\n<p><a href="https://justinmeiners.github.io/lc3-vm/img/no_vm.gif">Porting without a VM</a>\n<a href="https://justinmeiners.github.io/lc3-vm/img/vm.gif">Porting with a VM</a></p>\n<p>Structurally, bytecode resembles machine code. It&#x2019;s a dense, linear sequence of binary instructions. That keeps overhead low and plays nice with the cache. However, it&#x2019;s a much simpler, higher-level instruction set than any real chip out there. (In many bytecode formats, each instruction is only a single byte long, hence &#x201C;bytecode&#x201D;.)</p>\n<h1 id="Reference"><a href="#Reference"></a>Reference</h1>\n<ul>\n<li>http://craftinginterpreters.com/a-map-of-the-territory.html#transpilers</li>\n<li>https://justinmeiners.github.io/lc3-vm/</li>\n</ul>\n',i=[{level:3,title:"Virtual machine",children:[]},{level:1,title:"Bytecode",children:[]},{level:1,title:"Reference",children:[]}];export{e as attributes,t as html,i as nestedHeaders};
