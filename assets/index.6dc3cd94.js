import{C as e,h as t,o as n,d as r,f as i,k as a,D as o,t as u,g as c}from"./vendor.65f8cca0.js";var s=function(){function e(){this.left=null,this.right=null,this.value=null}var t=e.prototype;return t.isLeaf=function(){return null===this.left&&null===this.right},t.encode=function(){return this.value?this.value:[this.left.encode(),this.right.encode()]},e}();var f=function(){function e(e){this.leafCache={},this.root=e||new s}var t=e.prototype;return t.stringToBitString=function(e){if(!e)return"";var t=e.split(""),n=parseInt(t.pop()),r="";return(r=t.map((function(e){return void 0===(t=e.charCodeAt(0).toString(2))&&(t=""),void 0===n&&(n=8),"0".repeat(n-t.length)+t;var t,n})).join("")).substr(0,r.length-n)},t.bitStringToString=function(e){var t=8-e.length%8,n="";e+="0".repeat(t);for(var r=0;r<e.length;r+=8)n+=String.fromCharCode(parseInt(e.substr(r,8),2));return n+=t.toString()},t.encode=function(e){var t=this.encodeBitString(e);return this.bitStringToString(t)},t.decode=function(e){var t=this;if(!e)return"";var n="",r=this.stringToBitString(e),i=this.root;return r.split("").forEach((function(e){(i=i["0"===e?"left":"right"]).isLeaf()&&(n+=i.value,i=t.root)})),n},t.encodeBitString=function(e){var t=this;return e.split("").map((function(e){return t.bitValue(e)})).join("")},t.bitValue=function(e){return this.leafCache[e]||this.generateLeafCache(),this.leafCache[e]},t.generateLeafCache=function(e,t){void 0===e&&(e=this.root),void 0===t&&(t=""),e.isLeaf()?this.leafCache[e.value]=t:(this.generateLeafCache(e.left,t+"0"),this.generateLeafCache(e.right,t+"1"))},t.encodeTree=function(){return this.root.encode()},e.decodeTree=function(t){return new e(e.parseNode(t))},e.parseNode=function(t){var n=new s;return Array.isArray(t)?(n.left=e.parseNode(t[0]),n.right=e.parseNode(t[1])):n.value=t,n},e}(),h=function(){function e(e){this.rawString=e}var t=e.prototype;return t.build=function(){var e=this.buildFrequencyTable(),t=this.combineTable(e),n=this.compressCombinedTable(t);return f.decodeTree(n)},t.frequencySorter=function(e,t){return e[1]-t[1]},t.combineTable=function(e){for(;e.length>1;){var t=e.shift(),n=e.shift();e.unshift([[t,n],t[1]+n[1]]),e.sort(this.frequencySorter)}return e[0]},t.buildFrequencyTable=function(){var e={};return this.rawString.split("").forEach((function(t){e[t]=e[t]?e[t]+1:1})),Object.entries(e).sort(this.frequencySorter)},t.compressCombinedTable=function(e){var t=e[0];return Array.isArray(t)?[this.compressCombinedTable(t[0]),this.compressCombinedTable(t[1])]:t},e}(),l=function(){function e(){}return e.treeFromText=function(e){return new h(e).build()},e.decodeTree=function(e){return f.decodeTree(e)},e}(),d=e({setup(){let e=t({rawString:"abcaa",encodedBit:"",encodedCharString:"",treeEncoded:""});function n(){let t=e.value.rawString,n=l.treeFromText(t);e.value.encodedBit=n.encodeBitString(t),e.value.encodedCharString=n.encode(t),e.value.treeEncoded=JSON.stringify(n.encodeTree())}return n(),{huffmanData:e,onRawDataChange:n}}});const g={class:"huffman"},p=i("h1",null,[c("Demo of "),i("a",{href:"https://github.com/wizardpisces/huffman-ts",target:"__blank"},"huffman-ts")],-1),v=c("Raw data: ");d.render=function(e,t,c,s,f,h){return n(),r("div",g,[p,i("ul",null,[i("li",null,[v,a(i("input",{type:"text",onInput:t[1]||(t[1]=(...t)=>e.onRawDataChange&&e.onRawDataChange(...t)),"onUpdate:modelValue":t[2]||(t[2]=t=>e.huffmanData.rawString=t)},null,544),[[o,e.huffmanData.rawString]])]),i("li",null,'Encoded bit string: "'+u(e.huffmanData.encodedBit)+'"',1),i("li",null,'Encoded char string: "'+u(e.huffmanData.encodedCharString)+'"',1),i("li",null,'Encoded huffman tree: "'+u(e.huffmanData.treeEncoded)+'"',1)])])};export default d;
