const s={title:"从0到1实现编译器"},n='<h2 id="SASS&#x7B80;&#x4ECB;"><a href="#SASS&#x7B80;&#x4ECB;"></a>SASS&#x7B80;&#x4ECB;</h2>\n<p><a href="https://sass-lang.com/documentation">SASS</a>&#x662F;css&#x7684;&#x589E;&#x5F3A;&#x6269;&#x5C55;&#xFF0C;&#x8BA9;&#x5F00;&#x53D1;&#x80FD;&#x591F;&#x4F7F;&#x7528;variables, nested rules, mixins, functions&#x7B49;&#x80FD;&#x529B;&#x53BB;&#x4E66;&#x5199;css;</p>\n<h2 id="&#x672C;&#x7BC7;&#x76EE;&#x6807;"><a href="#&#x672C;&#x7BC7;&#x76EE;&#x6807;"></a>&#x672C;&#x7BC7;&#x76EE;&#x6807;</h2>\n<p>&#x4ECE;&#x96F6;&#x5230;1&#x5B9E;&#x73B0;SASS&#x7F16;&#x8BD1;&#x5668;(&#x5C06;sass&#x8F6C;&#x4E3A;css&#x8BED;&#x6CD5;)&#xFF0C;&#x7CFB;&#x5217;&#x6587;&#x7AE0;&#x4F1A;&#x6309;&#x7167;&#x5982;&#x4E0B;&#x6D41;&#x7A0B;&#x8FDB;&#x884C;:</p>\n<p>code -&gt; AST(<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a>) -&gt; transformed AST -&gt; transformed code</p>\n<h2 id="&#x76EE;&#x6807;&#x4F8B;&#x5B50;"><a href="#&#x76EE;&#x6807;&#x4F8B;&#x5B50;"></a>&#x76EE;&#x6807;&#x4F8B;&#x5B50;</h2>\n<p>&#x8F93;&#x5165;&#xFF1A;</p>\n<pre><code class="language-scss"><span class="hljs-variable">$primary-color</span>: <span class="hljs-number">#333</span>;\n<span class="hljs-selector-class">.test</span>{\n  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$primary-color</span>;\n}\n</code></pre>\n<p>&#x8F93;&#x51FA;&#xFF1A;</p>\n<pre><code class="language-scss"><span class="hljs-selector-class">.test</span> {\n    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;\n}\n</code></pre>\n<h2 id="Step1&#xFF1A;&#x5B9A;&#x4E49;&#x57FA;&#x672C;&#x7684; AST &#x7ED3;&#x6784;&#xFF0C;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;node&#x8282;&#x70B9;&#x7684;JSON&#x8868;&#x8FBE;&#x5F0F;"><a href="#Step1&#xFF1A;&#x5B9A;&#x4E49;&#x57FA;&#x672C;&#x7684; AST &#x7ED3;&#x6784;&#xFF0C;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;node&#x8282;&#x70B9;&#x7684;JSON&#x8868;&#x8FBE;&#x5F0F;"></a>Step1&#xFF1A;&#x5B9A;&#x4E49;&#x57FA;&#x672C;&#x7684; AST &#x7ED3;&#x6784;&#xFF0C;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;node&#x8282;&#x70B9;&#x7684;JSON&#x8868;&#x8FBE;&#x5F0F;</h2>\n<h3 id="&#x5B9A;&#x4E49;AST"><a href="#&#x5B9A;&#x4E49;AST"></a>&#x5B9A;&#x4E49;AST</h3>\n<p>&#x8FD9;&#x91CC;&#x7684;AST&#x5B9A;&#x4E49;&#x9488;&#x5BF9;&#x4F8B;&#x5B50;&#x505A;&#x4E86;&#x7B80;&#x5316;,&#x5148;&#x770B;&#x540E;&#x9762;&#x7684;&#x8FD0;&#x7528;&#x518D;&#x56DE;&#x8FC7;&#x5934;&#x6765;&#x770B;&#x5B9A;&#x4E49;&#x4F1A;&#x66F4;&#x597D;&#x7406;&#x89E3;&#x4E9B;&#xFF1A;</p>\n<pre><code class="language-ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">enum</span> NodeTypes {\n    TEXT: <span class="hljs-string">&quot;TEXT&quot;</span>,\n    VARIABLE: <span class="hljs-string">&quot;VARIABLE&quot;</span>,\n    SELECTOR: <span class="hljs-string">&quot;SELECTOR&quot;</span>,\n    DECLARATION: <span class="hljs-string">&quot;DECLARATION&quot;</span>,\n    RULE: <span class="hljs-string">&quot;RULE&quot;</span>,\n    RootNode: <span class="hljs-string">&quot;RootNode&quot;</span>,\n}\n\n<span class="hljs-keyword">interface</span> Node {\n    [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>\n    <span class="hljs-keyword">type</span>: NodeTypes\n}\n\n<span class="hljs-keyword">interface</span> VariableNode <span class="hljs-keyword">extends</span> Node{\n    <span class="hljs-keyword">type</span>: NodeTypes.VARIABLE\n    value: <span class="hljs-built_in">string</span>\n}\n\n<span class="hljs-keyword">interface</span> TextNode <span class="hljs-keyword">extends</span> Node {\n    <span class="hljs-keyword">type</span>: NodeTypes.TEXT\n    value: <span class="hljs-built_in">string</span>\n}\n\n<span class="hljs-keyword">interface</span> SelectorNode <span class="hljs-keyword">extends</span> Node {\n    <span class="hljs-keyword">type</span>: NodeTypes.SELECTOR\n    value: TextNode\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> DeclarationStatement <span class="hljs-keyword">extends</span> Node {\n    <span class="hljs-keyword">type</span>: NodeTypes.DECLARATION\n    left: VariableNode | TextNode\n    right: VariableNode | TextNode\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> RuleStatement <span class="hljs-keyword">extends</span> Node {\n    <span class="hljs-keyword">type</span>: NodeTypes.RULE\n    selector: SelectorNode\n    children: DeclarationStatement[]\n}\n\n<span class="hljs-comment">// RootNode &#x662F;&#x6700;&#x5916;&#x5C42;&#x7684;&#x8282;&#x70B9;&#x7C7B;&#x578B;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> RootNode <span class="hljs-keyword">extends</span> Node {\n    <span class="hljs-keyword">type</span>: NodeTypes.RootNode\n    children: (RuleStatement | DeclarationStatement)[]\n}\n\n</code></pre>\n<h3 id="&#x6E90;&#x7801;&#x8DDF;AST&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;"><a href="#&#x6E90;&#x7801;&#x8DDF;AST&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;"></a>&#x6E90;&#x7801;&#x8DDF;AST&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;</h3>\n<p>&#x6839;&#x636E;&#x4EE5;&#x4E0A;&#x7684;AST&#x5B9A;&#x4E49;&#xFF0C;&#x9700;&#x8981;&#x89E3;&#x6790;&#x51FA;&#x7684;&#x8282;&#x70B9;JSON&#x8868;&#x8FBE;&#x5F0F;&#x5E94;&#x8BE5;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF1A;</p>\n<pre><code class="language-scss"><span class="hljs-variable">$primary-color</span>: <span class="hljs-number">#333</span>;\n</code></pre>\n<p>&#x9700;&#x8981;parse&#x6210;&#xFF1A;</p>\n<pre><code class="language-json">{\n    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;DECLARATION&quot;</span>,\n    <span class="hljs-attr">&quot;left&quot;</span>: {\n        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;VARIABLE&quot;</span>,\n        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;$primary-color&quot;</span>,\n    },\n    <span class="hljs-attr">&quot;right&quot;</span>: {\n        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;TEXT&quot;</span>,\n        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;#333&quot;</span>,\n    }\n}\n</code></pre>\n<hr>\n<pre><code class="language-scss"><span class="hljs-selector-class">.test</span>{\n  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$primary-color</span>;\n}\n</code></pre>\n<p>&#x9700;&#x8981;parse&#x6210;&#xFF1A;</p>\n<pre><code class="language-json">{\n      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;RULE&quot;</span>,\n      <span class="hljs-attr">&quot;selector&quot;</span>: {\n        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;SELECTOR&quot;</span>,\n        <span class="hljs-attr">&quot;value&quot;</span>: {\n          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;TEXT&quot;</span>,\n          <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;.test&quot;</span>,\n        }\n      },\n      <span class="hljs-attr">&quot;children&quot;</span>: [\n        {\n          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;DECLARATION&quot;</span>,\n          <span class="hljs-attr">&quot;left&quot;</span>: {\n            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;TEXT&quot;</span>,\n            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;color&quot;</span>,\n          \n          },\n          <span class="hljs-attr">&quot;right&quot;</span>:  {\n            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;VARIABLE&quot;</span>,\n            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;$primary-color&quot;</span>,\n          },\n        }\n      ]\n    }\n</code></pre>\n<h2 id="Step2: sass&#x5B57;&#x7B26;&#x4E32;parse&#x4E3A;&#x76EE;&#x6807; AST"><a href="#Step2: sass&#x5B57;&#x7B26;&#x4E32;parse&#x4E3A;&#x76EE;&#x6807; AST"></a>Step2: sass&#x5B57;&#x7B26;&#x4E32;parse&#x4E3A;&#x76EE;&#x6807; AST</h2>\n<p>&#x76EE;&#x6807;: &#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#x7684;&#x8C03;&#x7528;</p>\n<pre><code class="language-js"><span class="hljs-keyword">let</span> ast:RootNode = parse(lexical(input_stream(sass)))\n</code></pre>\n<h3 id="&#x5B9E;&#x73B0;input_stream&#x51FD;&#x6570;&#x8BFB;&#x53D6;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#x6D41;&#xFF1A;"><a href="#&#x5B9E;&#x73B0;input_stream&#x51FD;&#x6570;&#x8BFB;&#x53D6;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#x6D41;&#xFF1A;"></a>&#x5B9E;&#x73B0;<strong>input_stream</strong>&#x51FD;&#x6570;&#x8BFB;&#x53D6;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#x6D41;&#xFF1A;</h3>\n<pre><code class="language-ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">input_stream</span>(<span class="hljs-params">input: <span class="hljs-built_in">string</span></span>):<span class="hljs-title">InputStream</span></span>{\n    <span class="hljs-keyword">let</span> offset = <span class="hljs-number">0</span>, line = <span class="hljs-number">1</span>, column = <span class="hljs-number">1</span>;\n     <span class="hljs-keyword">return</span> {\n        next,\n        peek,\n        setCoordination,\n        getCoordination,\n        eof\n    }\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params"></span>):<span class="hljs-title">string</span> </span>{\n        <span class="hljs-keyword">let</span> ch = input.charAt(offset++);\n\n        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&quot;\\n&quot;</span>) line++, column = <span class="hljs-number">1</span>; <span class="hljs-keyword">else</span> column++;\n\n        <span class="hljs-keyword">return</span> ch;\n    }\n    <span class="hljs-comment">// &#x624B;&#x52A8;&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x4FE1;&#x606F;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setCoordination</span>(<span class="hljs-params">coordination: Position</span>) </span>{\n        offset = coordination.offset;\n        line = coordination.line;\n        column = coordination.column;\n    }\n\n    <span class="hljs-comment">// &#x83B7;&#x53D6;&#x5F53;&#x524D;&#x8BFB;&#x53D6;&#x7684;&#x4F4D;&#x7F6E;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCoordination</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">return</span> {\n            offset,\n            line,\n            column\n        }\n    }\n\n    <span class="hljs-comment">// &#x9884;&#x5148;&#x8BFB;&#x53D6;&#x4E0B;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x505A;&#x4F4D;&#x7F6E;&#x79FB;&#x52A8;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">peek</span>(<span class="hljs-params"></span>):<span class="hljs-title">string</span> </span>{\n        <span class="hljs-keyword">return</span> input.charAt(offset);\n    }\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eof</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">return</span> peek() === <span class="hljs-string">&quot;&quot;</span>;\n    }\n}\n</code></pre>\n<h3 id="&#x5B9E;&#x73B0;lex&#x51FD;&#x6570;&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x6D41;&#x8F6C;&#x4E3A; token &#x6D41;"><a href="#&#x5B9E;&#x73B0;lex&#x51FD;&#x6570;&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x6D41;&#x8F6C;&#x4E3A; token &#x6D41;"></a>&#x5B9E;&#x73B0;<strong>lex</strong>&#x51FD;&#x6570;&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x6D41;&#x8F6C;&#x4E3A; token &#x6D41;</h3>\n<pre><code class="language-ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> Token = {\n    <span class="hljs-keyword">type</span>: Node[<span class="hljs-string">&apos;type&apos;</span>]\n    value: <span class="hljs-built_in">string</span>\n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lex</span>(<span class="hljs-params">input: InputStream</span>):<span class="hljs-title">TokenStream</span> </span>{\n    <span class="hljs-keyword">return</span> {\n        next,\n        peek,\n        eof\n    }\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_whitespace</span>(<span class="hljs-params">ch</span>) </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; \\t\\n&quot;</span>.indexOf(ch) &gt;= <span class="hljs-number">0</span>;\n    }\n\n    <span class="hljs-comment">// Variable&#x7684;&#x53EF;&#x80FD;&#x6807;&#x8BC6;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_id_start</span>(<span class="hljs-params">ch</span>) </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-regexp">/[$]/</span>.test(ch);\n    }\n\n  \n    <span class="hljs-comment">// declaration&#x7684;&#x53EF;&#x80FD;&#x6807;&#x8BC6;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_assign_char</span>(<span class="hljs-params">ch</span>) </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;:&quot;</span>.indexOf(ch) &gt;= <span class="hljs-number">0</span>;\n    }\n\n    <span class="hljs-comment">// &#x666E;&#x901A;&#x5B57;&#x7B26;&#x4E32;&#x8BFB;&#x53D6;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_base_char</span>(<span class="hljs-params">ch</span>) </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-regexp">/[a-z0-9_\\.\\#\\@\\%\\-&quot;&apos;&amp;\\[\\]]/i</span>.test(ch);\n    }\n\n    <span class="hljs-comment">// sass&#x53D8;&#x91CF;&#x540D;&#x9650;&#x5236;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_id_char_limit</span>(<span class="hljs-params">ch</span>) </span>{\n        <span class="hljs-keyword">return</span> is_id_start(ch) || <span class="hljs-regexp">/[a-z0-9_-]/i</span>.test(ch); \n    }\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_assign_char</span>(<span class="hljs-params"></span>):<span class="hljs-title">Token</span> </span>{\n        <span class="hljs-keyword">return</span> {\n            <span class="hljs-keyword">type</span>: NodeTypes.DECLARATION,\n            value: input.next()\n        }\n    }\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_string</span>(<span class="hljs-params"></span>):<span class="hljs-title">Token</span> </span>{\n        <span class="hljs-comment">/**\n         * &apos;#&apos; end eg:\n         * .icon-#{$size} {}\n         */</span>\n        <span class="hljs-keyword">let</span> str = read_end(<span class="hljs-regexp">/[,;{}():#\\s]/</span>);\n\n        <span class="hljs-keyword">if</span> (internalCallIdentifiers.includes(str)) {<span class="hljs-comment">//possible internal url</span>\n            <span class="hljs-keyword">let</span> callStr = readInternalCall(str);\n\n            <span class="hljs-keyword">return</span> callStr;\n        }\n\n        <span class="hljs-keyword">return</span> {\n            <span class="hljs-keyword">type</span>: NodeTypes.TEXT,\n            value: str\n        };\n    }\n\n    <span class="hljs-comment">// &#x6839;&#x636E;&#x6761;&#x4EF6;&#x9650;&#x5236;&#x8BFB;&#x53D6;&#x6D88;&#x8D39;&#x6389;&#x5C3D;&#x53EF;&#x80FD;&#x591A;&#x7684;&#x5B57;&#x7B26;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_while</span>(<span class="hljs-params">predicate</span>) </span>{\n        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span>;\n        <span class="hljs-keyword">while</span> (!input.eof() &amp;&amp; predicate(input.peek()))\n            str += input.next();\n        <span class="hljs-keyword">return</span> str;\n    }\n\n    <span class="hljs-comment">// &#x4EA7;&#x51FA;&#x53D8;&#x91CF; token</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_ident</span>(<span class="hljs-params"></span>): <span class="hljs-title">Token</span> </span>{\n        <span class="hljs-keyword">let</span> id = read_while(is_id_char_limit);\n        <span class="hljs-keyword">return</span> {\n            <span class="hljs-keyword">type</span>: NodeTypes.VARIABLE,\n            value: id\n        };\n    }\n\n    <span class="hljs-comment">// &#x8BFB;&#x53D6;&#x4E0B;&#x4E00;&#x4E2A; token &#x5E76;&#x79FB;&#x52A8;&#x4F4D;&#x7F6E;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_next</span>(<span class="hljs-params"></span>): <span class="hljs-title">Token</span> </span>{\n         <span class="hljs-comment">// &#x8DF3;&#x8FC7;&#x7A7A;&#x767D;&#x5B57;&#x7B26;</span>\n        read_while(is_whitespace);\n        <span class="hljs-keyword">if</span> (is_assign_char(ch)) <span class="hljs-keyword">return</span> read_assign_char();\n        <span class="hljs-keyword">if</span> (is_id_start(ch)) <span class="hljs-keyword">return</span> read_ident();\n        <span class="hljs-keyword">if</span> (is_base_char(ch)) <span class="hljs-keyword">return</span> read_string();\n    }\n\n    <span class="hljs-comment">//&#x8BFB;&#x53D6;&#x4E0B;&#x4E00;&#x4E2A; token&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x6539;&#x53D8;&#x8BFB;&#x53D6;&#x6E38;&#x6807;&#x4FE1;&#x606F;&#xFF0C;&#x6240;&#x4EE5;&#x6709;&#x5148;&#x83B7;&#x53D6;&#x4FE1;&#x606F;&#xFF0C;&#x8BFB;&#x53D6;token&#x540E;&#x8FD8;&#x539F;&#x4F4D;&#x7F6E;&#x4FE1;&#x606F;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ll</span>(<span class="hljs-params">n = 1</span>): <span class="hljs-title">Token</span> </span>{\n        <span class="hljs-keyword">let</span> coordination = input.getCoordination()\n        <span class="hljs-keyword">let</span> tok = read_next();\n        input.setCoordination(coordination)\n        <span class="hljs-keyword">return</span> tok;\n    }\n\n    <span class="hljs-comment">// &#x9884;&#x6D4B;&#x4E0B;&#x4E00;&#x4E2A; Token &#x7C7B;&#x578B;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">peek</span>(<span class="hljs-params">n = 1</span>): <span class="hljs-title">Token</span> </span>{\n        <span class="hljs-keyword">return</span> ll(n);\n    }\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params"></span>): <span class="hljs-title">Token</span> </span>{\n        <span class="hljs-keyword">return</span> read_next();\n    }\n\n}\n</code></pre>\n<h4 id="&#x5B57;&#x7B26;&#x6D41;&#x8F6C;&#x6362;Token&#x6D41;&#x7684;&#x7ED3;&#x679C;&#xFF1A;"><a href="#&#x5B57;&#x7B26;&#x6D41;&#x8F6C;&#x6362;Token&#x6D41;&#x7684;&#x7ED3;&#x679C;&#xFF1A;"></a>&#x5B57;&#x7B26;&#x6D41;&#x8F6C;&#x6362;Token&#x6D41;&#x7684;&#x7ED3;&#x679C;&#xFF1A;</h4>\n<pre><code class="language-js">{ <span class="hljs-attr">type</span>: <span class="hljs-string">&apos;VARIABLE&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;$primary-color&apos;</span> }\n{ <span class="hljs-attr">type</span>: <span class="hljs-string">&apos;DECLARATION&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;:&apos;</span> }\n{ <span class="hljs-attr">type</span>: <span class="hljs-string">&apos;TEXT&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;#333&apos;</span> }\n{ <span class="hljs-attr">type</span>: <span class="hljs-string">&apos;PUNC&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;;&apos;</span> }\n{ <span class="hljs-attr">type</span>: <span class="hljs-string">&apos;TEXT&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;.test&apos;</span> }\n{ <span class="hljs-attr">type</span>: <span class="hljs-string">&apos;PUNC&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;{&apos;</span> }\n{ <span class="hljs-attr">type</span>: <span class="hljs-string">&apos;TEXT&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;color&apos;</span> }\n{ <span class="hljs-attr">type</span>: <span class="hljs-string">&apos;DECLARATION&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;:&apos;</span> }\n{ <span class="hljs-attr">type</span>: <span class="hljs-string">&apos;VARIABLE&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;$primary-color&apos;</span> }\n{ <span class="hljs-attr">type</span>: <span class="hljs-string">&apos;PUNC&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;;&apos;</span> }\n{ <span class="hljs-attr">type</span>: <span class="hljs-string">&apos;PUNC&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;}&apos;</span> }\n</code></pre>\n<p>&#x53EF;&#x4EE5;&#x770B;&#x51FA;token&#x4E00;&#x822C;&#x7528;&lt;type, value&gt;&#x5F62;&#x4F3C;&#x7684;&#x4E8C;&#x5143;&#x7EC4;&#x6765;&#x8868;&#x793A;&#xFF0C;type&#x8868;&#x793A;&#x4E00;&#x4E2A;Token&#x79CD;&#x7C7B;&#xFF0C;value&#x4E3A;&#x5C5E;&#x6027;&#x503C;&#xFF08;&#x4E00;&#x822C;&#x662F;&#x6E90;&#x7801;&#x76F8;&#x5173;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF09;</p>\n<h3 id="&#x5B9E;&#x73B0;parse&#x51FD;&#x6570;&#x5C06;Token&#x6D41;&#x8F6C;&#x4E3A;AST&#x8BED;&#x6CD5;&#x6811;&#xFF1A;"><a href="#&#x5B9E;&#x73B0;parse&#x51FD;&#x6570;&#x5C06;Token&#x6D41;&#x8F6C;&#x4E3A;AST&#x8BED;&#x6CD5;&#x6811;&#xFF1A;"></a>&#x5B9E;&#x73B0;<strong>parse</strong>&#x51FD;&#x6570;&#x5C06;<strong>Token</strong>&#x6D41;&#x8F6C;&#x4E3A;AST&#x8BED;&#x6CD5;&#x6811;&#xFF1A;</h3>\n<p><strong>Token&#x6D41;</strong>&#x5230;AST(<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a>)&#x8BED;&#x6CD5;&#x6811;&#x7684;&#x751F;&#x6210;,\n&#x53EF;&#x4EE5;&#x5728;<a href="https://astexplorer.net/">astexplorer</a>&#x4F53;&#x9A8C;&#x4E0B;&#x5404;&#x79CD;&#x6E90;&#x7801;&#x8DDF; AST &#x7684;&#x6620;&#x5C04;&#x5173;&#x7CFB;</p>\n<pre><code class="language-ts">\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse</span>(<span class="hljs-params">input: LexicalStream</span>) </span>{\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delimited</span>(<span class="hljs-params">start: puncType, stop: puncType, separator: puncType, parser: <span class="hljs-built_in">Function</span></span>) </span>{<span class="hljs-comment">// FIFO</span>\n        <span class="hljs-keyword">let</span> statements: <span class="hljs-built_in">any</span>[] = [], first = <span class="hljs-literal">true</span>;\n\n        skipPunc(start);\n\n        <span class="hljs-keyword">while</span> (!input.eof()) {\n            <span class="hljs-keyword">if</span> (isPuncToken(stop)) <span class="hljs-keyword">break</span>;\n            <span class="hljs-keyword">if</span> (first) {\n                first = <span class="hljs-literal">false</span>;\n            } <span class="hljs-keyword">else</span> {\n                <span class="hljs-keyword">if</span> (separator === <span class="hljs-string">&apos;;&apos;</span>) {\n                    skipPuncSilent(separator)\n                } <span class="hljs-keyword">else</span> {\n                    skipPunc(separator);\n                }\n            }\n            <span class="hljs-keyword">if</span> (isPuncToken(stop)) <span class="hljs-keyword">break</span>;\n\n            statements.push(parser());\n        }\n        skipPunc(stop);\n\n        <span class="hljs-keyword">return</span> statements;\n    }\n\n    <span class="hljs-comment">// Token&#x7684;&#x89E3;&#x6790;&#x5206;&#x53D1;</span>\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dispatchParser</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-comment">// predict &#x4E0B;&#x4E00;&#x4E2A;Token&#x7684;&#x7C7B;&#x578B;&#x6765;&#x5224;&#x5B9A;&#x4E0B;&#x4E00;&#x6B65;&#x7684;&#x89E3;&#x6790;</span>\n        <span class="hljs-keyword">let</span> tok = input.peek();\n\n        <span class="hljs-comment">// VARIABLE&#x7C7B;&#x578B;&#x5C31;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;Token&#x4F5C;&#x4E3A;&#x8BED;&#x6CD5;&#x6811;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#xFF08;&#x8BF4;&#x660E; VARIABLE&#x65E2;&#x53EF;&#x4EE5;&#x662F;Token&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x662F;AST Node&#x7C7B;&#x578B;&#xFF09;</span>\n        <span class="hljs-keyword">if</span> (tok.type === NodeTypes.VARIABLE) {\n            <span class="hljs-keyword">return</span> input.next();\n        }\n\n        <span class="hljs-comment">// &#x540C;&#x4E0A;</span>\n        <span class="hljs-keyword">if</span> (tok.type === NodeTypes.PUNC) {\n            <span class="hljs-keyword">return</span> input.next()\n        }\n\n        <span class="hljs-keyword">if</span> (tok.type === NodeTypes.TEXT) {\n            <span class="hljs-keyword">return</span> input.next()\n        }\n    }\n\n    <span class="hljs-comment">// &#x89E3;&#x6790; DECLARATION &#x8282;&#x70B9;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseDeclaration</span>(<span class="hljs-params">left: DeclarationStatement[&apos;left&apos;]</span>): <span class="hljs-title">DeclarationStatement</span> </span>{\n        input.next(); <span class="hljs-comment">// skip &apos;:&apos;</span>\n        <span class="hljs-keyword">return</span> {\n            <span class="hljs-keyword">type</span>: NodeTypes.DECLARATION,\n            left: left,\n            <span class="hljs-comment">// &#x8BFB;&#x53D6; Text value</span>\n            right: input.next()\n        }\n    }\n\n    <span class="hljs-comment">// &#x89E3;&#x6790; RULE&#x8282;&#x70B9;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseRule</span>(<span class="hljs-params">selector: RuleStatement[&apos;selector&apos;]</span>): <span class="hljs-title">RuleStatement</span> </span>{\n        <span class="hljs-keyword">let</span> children = delimited(<span class="hljs-string">&quot;{&quot;</span>, <span class="hljs-string">&quot;}&quot;</span>, <span class="hljs-string">&quot;;&quot;</span>, parseStatement);\n        <span class="hljs-keyword">return</span> {\n            <span class="hljs-keyword">type</span>: NodeTypes.RULE,\n            selector,\n            children\n        }\n    }\n\n    <span class="hljs-comment">// &#x901A;&#x8FC7;predict&#x4E0B;&#x4E00;&#x4E2A; Token&#x7C7B;&#x578B;&#x6765;&#x5224;&#x65AD;&#x89E3;&#x6790;&#x7684; AST Node&#x7C7B;&#x578B;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maybeDeclaration</span>(<span class="hljs-params">exp</span>) </span>{\n        <span class="hljs-keyword">let</span> expr = exp();\n         <span class="hljs-keyword">if</span> (isAssignToken()) {\n            <span class="hljs-keyword">if</span> (expr.type === NodeTypes.VARIABLE) {\n                <span class="hljs-keyword">return</span> parseDeclaration(expr)\n            }\n         }\n        <span class="hljs-keyword">if</span> (isPuncToken(<span class="hljs-string">&apos;{&apos;</span>)) {\n            <span class="hljs-keyword">return</span> parseRule({\n                <span class="hljs-keyword">type</span>: NodeTypes.SELECTOR,\n                value: expr\n            }) <span class="hljs-comment">//passin selector</span>\n        }\n\n        <span class="hljs-keyword">return</span> expr;\n    }\n\n    <span class="hljs-comment">// &#x57FA;&#x7840; Statement&#x8282;&#x70B9;&#x7684; parser</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseStatement</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">return</span> maybeDeclaration(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n            <span class="hljs-keyword">return</span> dispatchParser()\n        })\n    }\n\n    <span class="hljs-comment">// parse &#x5165;&#x53E3;&#x7684; children&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x89C1;&#x4E0A;&#x4E00;&#x7BC7;&#x7684; RootNode&#x8282;&#x70B9;&#x5B9A;&#x4E49;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parsechildren</span>(<span class="hljs-params"></span>): <span class="hljs-title">Statement</span>[] </span>{\n        <span class="hljs-keyword">let</span> children: Statement[] = [];\n        <span class="hljs-keyword">while</span> (!isEnd()) {\n            children.push(parseStatement());\n            skipPuncSilent(<span class="hljs-string">&quot;;&quot;</span>);\n        }\n        <span class="hljs-keyword">return</span> children\n    }\n\n    <span class="hljs-comment">// parser&#x7684;&#x5165;&#x53E3;</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseProgram</span>(<span class="hljs-params"></span>): <span class="hljs-title">RootNode</span> </span>{\n        <span class="hljs-keyword">return</span> {\n            <span class="hljs-keyword">type</span>: NodeTypes.RootNode,\n            children: parsechildren()\n        }\n    }\n    <span class="hljs-keyword">return</span> parseProgram()\n}\n</code></pre>\n<h4 id="parse&#x51FA;&#x6E90;&#x7801;(sass&#x6E90;&#x4EE3;&#x7801;)&#x5BF9;&#x5E94;&#x7684;&#x62BD;&#x8C61;&#x8BED;&#x6CD5;&#x6811;&#x5982;&#x4E0B;:"><a href="#parse&#x51FA;&#x6E90;&#x7801;(sass&#x6E90;&#x4EE3;&#x7801;)&#x5BF9;&#x5E94;&#x7684;&#x62BD;&#x8C61;&#x8BED;&#x6CD5;&#x6811;&#x5982;&#x4E0B;:"></a>parse&#x51FA;&#x6E90;&#x7801;(sass&#x6E90;&#x4EE3;&#x7801;)&#x5BF9;&#x5E94;&#x7684;&#x62BD;&#x8C61;&#x8BED;&#x6CD5;&#x6811;&#x5982;&#x4E0B;:</h4>\n<pre><code class="language-json">{\n  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;RootNode&quot;</span>,\n  <span class="hljs-attr">&quot;children&quot;</span>: [\n    {\n      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;DECLARATION&quot;</span>,\n      <span class="hljs-attr">&quot;left&quot;</span>: {\n        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;VARIABLE&quot;</span>,\n        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;$primary-color&quot;</span>\n      },\n      <span class="hljs-attr">&quot;right&quot;</span>: {\n        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;TEXT&quot;</span>,\n        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;#333&quot;</span>\n      }\n    },\n    {\n      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;RULE&quot;</span>,\n      <span class="hljs-attr">&quot;selector&quot;</span>: {\n        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;SELECTOR&quot;</span>,\n        <span class="hljs-attr">&quot;value&quot;</span>: {\n          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;TEXT&quot;</span>,\n          <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;.test&quot;</span>\n        }\n      },\n      <span class="hljs-attr">&quot;children&quot;</span>: [\n        {\n          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;DECLARATION&quot;</span>,\n          <span class="hljs-attr">&quot;left&quot;</span>: {\n            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;TEXT&quot;</span>,\n            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;color&quot;</span>\n          },\n          <span class="hljs-attr">&quot;right&quot;</span>: {\n            <span class="hljs-attr">&quot;value&quot;</span>: {\n              <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;VARIABLE&quot;</span>,\n              <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;$primary-color&quot;</span>\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre>\n<p>&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x662F;&#x7531;&#x6700;&#x5F00;&#x59CB;&#x5B9A;&#x4E49; &#x7684;AST&#x8282;&#x70B9;&#x7EC4;&#x5408;&#x800C;&#x6210;</p>\n<h2 id="&#x7ED3;&#x8BED;"><a href="#&#x7ED3;&#x8BED;"></a>&#x7ED3;&#x8BED;</h2>\n<p>&#x4EE5;&#x4E0A;&#x662F;&#x4F2A;&#x4EE3;&#x7801;&#xFF0C;&#x5B9E;&#x9645;&#x4F1A;&#x6BD4;&#x8FD9;&#x4E2A;&#x590D;&#x6742;&#x4E00;&#x4E9B;&#xFF0C;\n&#x6BD4;&#x5982;&#x8FD8;&#x9700;&#x8981;&#x8003;&#x8651;&#x5F88;&#x591A;&#xFF1A;</p>\n<ol>\n<li>&#x8282;&#x70B9;&#x4F4D;&#x7F6E;&#x4FE1;&#x606F;&#x5B58;&#x50A8;&#xFF0C;&#x65B9;&#x4FBF;&#x505A;source-map</li>\n<li>&#x8282;&#x70B9;&#x6240;&#x5C5E;&#x6587;&#x4EF6;&#x4FE1;&#x606F;&#xFF0C;&#x4F1A;&#x6709;&#x6A21;&#x5757;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x6574;&#x7406;</li>\n<li>...</li>\n</ol>\n<h3 id="&#x6E90;&#x7801;&#x67E5;&#x770B;"><a href="#&#x6E90;&#x7801;&#x67E5;&#x770B;"></a><a href="https://github.com/wizardpisces/tiny-sass-compiler">&#x6E90;&#x7801;&#x67E5;&#x770B;</a></h3>\n<p>&#x76EE;&#x524D;&#x5DE5;&#x7A0B;&#x5B9E;&#x73B0;&#x7684;&#x529F;&#x80FD;&#xFF1A;</p>\n<h3 id="sass&#x57FA;&#x672C;&#x7279;&#x6027;:"><a href="#sass&#x57FA;&#x672C;&#x7279;&#x6027;:"></a>sass&#x57FA;&#x672C;&#x7279;&#x6027;:</h3>\n<ol>\n<li>Variables</li>\n<li>Nesting</li>\n<li>Extend/Inheritance</li>\n<li>Operators</li>\n<li>Mixins</li>\n<li>Modules</li>\n</ol>\n<h3 id="&#x7F16;&#x8BD1;&#x6D41;&#x7A0B;:"><a href="#&#x7F16;&#x8BD1;&#x6D41;&#x7A0B;:"></a>&#x7F16;&#x8BD1;&#x6D41;&#x7A0B;:</h3>\n<ol>\n<li>&#x8BCD;&#x6CD5;&#x5206;&#x6790;</li>\n<li>&#x8BED;&#x6CD5;&#x5206;&#x6790;</li>\n<li>AST&#x4F18;&#x5316;&#x8F6C;&#x6362;</li>\n<li>&#x6E90;&#x7801;&#x751F;&#x6210;(+sourceMap)&#xFF09;</li>\n</ol>\n\x3c!-- 预告下一篇：实现Transform 把源码(sass)关联的AST转换为目标代码(css)关联的 AST --\x3e\n<p><a href="https://juejin.cn/post/6910037343026020359">&#x539F;&#x6587;&#x5730;&#x5740;</a></p>\n',a=[{level:2,title:"SASS简介",children:[]},{level:2,title:"本篇目标",children:[]},{level:2,title:"目标例子",children:[]},{level:2,title:"Step1：定义基本的 AST 结构，可以理解为node节点的JSON表达式",children:[{level:3,title:"定义AST",children:[]},{level:3,title:"源码跟AST的对应关系",children:[]}]},{level:2,title:"Step2: sass字符串parse为目标 AST",children:[{level:3,title:"实现input_stream函数读取输入字符串流：",children:[]},{level:3,title:"实现lex函数将字符串流转为 token 流",children:[{level:4,title:"字符流转换Token流的结果：",children:[]}]}]},{level:3,title:"实现parse函数将Token流转为AST语法树：",children:[{level:4,title:"parse出源码(sass源代码)对应的抽象语法树如下:",children:[]}]},{level:2,title:"结语",children:[{level:3,title:"源码查看",children:[]},{level:3,title:"sass基本特性:",children:[]},{level:3,title:"编译流程:",children:[]}]}];export{s as attributes,n as html,a as nestedHeaders};
